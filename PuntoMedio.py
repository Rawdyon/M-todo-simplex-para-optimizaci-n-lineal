# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gwhkOmv-GnFBLhyq6pX7p4Vffhis2hQ
"""

import numpy as np
from scipy import linalg
import math

m = int(input("Ingrese el numero de restricciones"))
n = int(input("Ingrese el numero de variables"))
alpha = 0.5

#Leer la función objetivo
C = np.arange(n).reshape(n,1)
for i in range(n):
  C[i] = input("Digite el coeficiente")
print(C)

#Leer la matriz A
A = np.arange(m*n).reshape(m, n)
for i in range(m):
  for j in range(n):
    A[i][j] = input("Digite la entrada")
print(A)

#Leer las capacidades
B = np.arange(m).reshape(m,1)
for i in range(m):
  B[i] = input("Digite la capacidad")
print(B)

#Leer la solucion factible inicial
X = np.arange(n).reshape(n,1)
for j in range(n):
  X[j] = input("Digite la solucion")
print(X)

#Por generar la matriz D
D = np.arange(n*n).reshape(n,n)
for i in range(n):
  for j in range(n):
    D[i][j] = 0
  D[i][i] = X[i]
print(D)

#Por generar A gorrito
Av = np.matmul(A,D)
print(Av)

#Por generar C gorrito
Cv = np.matmul(D,C)
print(Cv)

#Por generar matrices para P
Avt = np.transpose(Av)
Wa = np.matmul(Av,Avt)
W = np.linalg.inv(Wa)
Va = np.matmul(Avt,W)
V = np.matmul(Va,A)
print(V)

#Por generar P
na, ma= V.shape
print(na)
print(ma)
I = np.arange(ma*na).reshape(ma, na)
for i in range(na):
  for j in range(ma):
    I[i][j] = 0
  I[i][i] = 1
print(I)

for i in range(na):
  for j in range(ma):
    V[i][j] = -V[i][j]
#print(V)
#print("\n")
#print(I)
P = I+V

#print("\n")

print(P)

#Por generar Cp
Cp = np.matmul(P,Cv)
print(Cp)

#Por calcular el maximo de Cp
max = abs(Cp[0][0])
for element in Cp:
  for el in element:
    if max < abs(el): 
       max = el
print(max)

#Por generar el vector de 1
na,ma = Cp.shape
Uno = np.arange(na*ma).reshape(na,ma)
for i in range(na):
  for j in range(ma):
    Uno[i][j] = 1
print(Uno)

alpM = alpha/max
#print(Cp)
Cp = alpM*Cp
Xv = Uno + Cp
print(Xv)

norm = 0
for element in Xv:
  for el in element:
    norm += el*el
norm = math.sqrt(norm)
print(norm)
if norm < 0.0005 :
  na, ma = Xv.shape
  print("La solución es")
  for i in range(na):
    for j in range(ma):
      print("x",i,"=",Xv[i][j])
  #break